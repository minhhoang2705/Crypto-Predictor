name: Frontend CI/CD

on:
  push:
    branches: [ main, master ]
    paths:
      - 'src/frontend/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'src/frontend/**'

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x]
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: src/frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: src/frontend
      run: npm ci
    
    - name: Run linter
      working-directory: src/frontend
      run: |
        npm install eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin --save-dev
        npx eslint . --ext .ts,.tsx
    
    - name: Run tests
      working-directory: src/frontend
      run: npm test -- --coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v2
      with:
        directory: src/frontend/coverage
        fail_ci_if_error: true

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Use Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16.x'
        cache: 'npm'
        cache-dependency-path: src/frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: src/frontend
      run: npm ci
    
    - name: Build
      working-directory: src/frontend
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: build
        path: src/frontend/build

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Download build artifacts
      uses: actions/download-artifact@v2
      with:
        name: build
        path: build
    
    - name: Deploy to server
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        SERVER_IP: ${{ secrets.SERVER_IP }}
        SERVER_USER: ${{ secrets.SERVER_USER }}
      run: |
        echo "$SSH_PRIVATE_KEY" > deploy_key
        chmod 600 deploy_key
        mkdir -p ~/.ssh
        ssh-keyscan -H $SERVER_IP >> ~/.ssh/known_hosts
        
        # Copy build files to server
        scp -i deploy_key -r build/* $SERVER_USER@$SERVER_IP:/var/www/crypto-prediction/
        
        # Restart Nginx
        ssh -i deploy_key $SERVER_USER@$SERVER_IP "sudo systemctl restart nginx" 