name: Backend CI/CD

on:
  push:
    branches: [ main, master ]
    paths:
      - 'src/api/**'
      - 'requirements.txt'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'src/api/**'
      - 'requirements.txt'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9]

    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pytest-cov
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        flake8 src/api --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/api --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run tests with pytest
      run: |
        pytest src/api/tests --cov=src/api --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v2
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Deploy to server
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        SERVER_IP: ${{ secrets.SERVER_IP }}
        SERVER_USER: ${{ secrets.SERVER_USER }}
      run: |
        echo "$SSH_PRIVATE_KEY" > deploy_key
        chmod 600 deploy_key
        mkdir -p ~/.ssh
        ssh-keyscan -H $SERVER_IP >> ~/.ssh/known_hosts
        
        # Copy files to server
        scp -i deploy_key -r src/api/* $SERVER_USER@$SERVER_IP:/home/$SERVER_USER/app/api/
        scp -i deploy_key requirements.txt $SERVER_USER@$SERVER_IP:/home/$SERVER_USER/app/
        
        # Restart services
        ssh -i deploy_key $SERVER_USER@$SERVER_IP "cd /home/$SERVER_USER/app && \
          source venv/bin/activate && \
          pip install -r requirements.txt && \
          sudo systemctl restart crypto-api" 